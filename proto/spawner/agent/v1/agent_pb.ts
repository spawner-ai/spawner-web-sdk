// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file spawner/agent/v1/agent.proto (package spawner.agent.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { CommonActionEvent } from "../../common_action/v1/common_action_pb";
import { file_spawner_common_action_v1_common_action } from "../../common_action/v1/common_action_pb";
import type { ObjectiveEvent } from "../../objective/v1/objective_pb";
import { file_spawner_objective_v1_objective } from "../../objective/v1/objective_pb";
import type { ObservationEvent } from "../../observation/v1/observation_pb";
import { file_spawner_observation_v1_observation } from "../../observation/v1/observation_pb";
import type { QuestEvent } from "../../quest/v1/quest_pb";
import { file_spawner_quest_v1_quest } from "../../quest/v1/quest_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file spawner/agent/v1/agent.proto.
 */
export const file_spawner_agent_v1_agent: GenFile = /*@__PURE__*/
  fileDesc("ChxzcGF3bmVyL2FnZW50L3YxL2FnZW50LnByb3RvEhBzcGF3bmVyLmFnZW50LnYxIsoCCgpBZ2VudEV2ZW50Ei4KBHR5cGUYASABKA4yIC5zcGF3bmVyLmFnZW50LnYxLkFnZW50RXZlbnRUeXBlEhAKCGFnZW50X2lkGAIgASgJEjkKCW9iamVjdGl2ZRgDIAEoCzIkLnNwYXduZXIub2JqZWN0aXZlLnYxLk9iamVjdGl2ZUV2ZW50SAASPwoLb2JzZXJ2YXRpb24YBCABKAsyKC5zcGF3bmVyLm9ic2VydmF0aW9uLnYxLk9ic2VydmF0aW9uRXZlbnRIABJECg1jb21tb25fYWN0aW9uGAUgASgLMisuc3Bhd25lci5jb21tb25fYWN0aW9uLnYxLkNvbW1vbkFjdGlvbkV2ZW50SAASLQoFcXVlc3QYBiABKAsyHC5zcGF3bmVyLnF1ZXN0LnYxLlF1ZXN0RXZlbnRIAEIJCgdwYXlsb2FkKtUBCg5BZ2VudEV2ZW50VHlwZRIgChxBR0VOVF9FVkVOVF9UWVBFX1VOU1BFQ0lGSUVEEAASHgoaQUdFTlRfRVZFTlRfVFlQRV9PQkpFQ1RJVkUQARIgChxBR0VOVF9FVkVOVF9UWVBFX09CU0VSVkFUSU9OEAISIgoeQUdFTlRfRVZFTlRfVFlQRV9DT01NT05fQUNUSU9OEAMSGgoWQUdFTlRfRVZFTlRfVFlQRV9RVUVTVBAEEh8KG0FHRU5UX0VWRU5UX1RZUEVfRk9WX0FDVElPThAFQoQBChRjb20uc3Bhd25lci5hZ2VudC52MUIKQWdlbnRQcm90b1ABogIDU0FYqgIQU3Bhd25lci5BZ2VudC5WMcoCEFNwYXduZXJcQWdlbnRcVjHiAhxTcGF3bmVyXEFnZW50XFYxXEdQQk1ldGFkYXRh6gISU3Bhd25lcjo6QWdlbnQ6OlYxYgZwcm90bzM", [file_spawner_common_action_v1_common_action, file_spawner_objective_v1_objective, file_spawner_observation_v1_observation, file_spawner_quest_v1_quest]);

/**
 * @generated from message spawner.agent.v1.AgentEvent
 */
export type AgentEvent = Message<"spawner.agent.v1.AgentEvent"> & {
  /**
   * @generated from field: spawner.agent.v1.AgentEventType type = 1;
   */
  type: AgentEventType;

  /**
   * @generated from field: string agent_id = 2;
   */
  agentId: string;

  /**
   * @generated from oneof spawner.agent.v1.AgentEvent.payload
   */
  payload: {
    /**
     * @generated from field: spawner.objective.v1.ObjectiveEvent objective = 3;
     */
    value: ObjectiveEvent;
    case: "objective";
  } | {
    /**
     * Only input.
     *
     * @generated from field: spawner.observation.v1.ObservationEvent observation = 4;
     */
    value: ObservationEvent;
    case: "observation";
  } | {
    /**
     * @generated from field: spawner.common_action.v1.CommonActionEvent common_action = 5;
     */
    value: CommonActionEvent;
    case: "commonAction";
  } | {
    /**
     * Only output.
     *
     * @generated from field: spawner.quest.v1.QuestEvent quest = 6;
     */
    value: QuestEvent;
    case: "quest";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message spawner.agent.v1.AgentEvent.
 * Use `create(AgentEventSchema)` to create a new message.
 */
export const AgentEventSchema: GenMessage<AgentEvent> = /*@__PURE__*/
  messageDesc(file_spawner_agent_v1_agent, 0);

/**
 * @generated from enum spawner.agent.v1.AgentEventType
 */
export enum AgentEventType {
  /**
   * @generated from enum value: AGENT_EVENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * An objective defines what the agent is pursuing. An objective is necessary
   * for the agent to decide on actions.
   *
   * @generated from enum value: AGENT_EVENT_TYPE_OBJECTIVE = 1;
   */
  OBJECTIVE = 1,

  /**
   * Observations can be interpreted as the agent's memory. The agent may
   * receive observations from the client, as well as automatically through
   * reflections and conversations.
   *
   * @generated from enum value: AGENT_EVENT_TYPE_OBSERVATION = 2;
   */
  OBSERVATION = 2,

  /**
   * Common actions are common set of actions the agent may take. Common actions
   * are function calls that may have parameters. The functionality must be
   * implemented on the client-side.
   *
   * @generated from enum value: AGENT_EVENT_TYPE_COMMON_ACTION = 3;
   */
  COMMON_ACTION = 3,

  /**
   * Quests are a "request for help" from the agent. Quests are generated when
   * there is an impediment to the agent's action. Quests may be fulfilled by
   * another agent, or more commonly, the player.
   *
   * @generated from enum value: AGENT_EVENT_TYPE_QUEST = 4;
   */
  QUEST = 4,

  /**
   * Field-of-view actions are interactions the agent makes with its
   * environment. FOV actions may be defined and passed from the client.
   *
   * @generated from enum value: AGENT_EVENT_TYPE_FOV_ACTION = 5;
   */
  FOV_ACTION = 5,
}

/**
 * Describes the enum spawner.agent.v1.AgentEventType.
 */
export const AgentEventTypeSchema: GenEnum<AgentEventType> = /*@__PURE__*/
  enumDesc(file_spawner_agent_v1_agent, 0);

