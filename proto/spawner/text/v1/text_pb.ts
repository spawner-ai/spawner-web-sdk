// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file spawner/text/v1/text.proto (package spawner.text.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { FieldOfView } from "../../field_of_view/v1/field_of_view_pb";
import { file_spawner_field_of_view_v1_field_of_view } from "../../field_of_view/v1/field_of_view_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file spawner/text/v1/text.proto.
 */
export const file_spawner_text_v1_text: GenFile = /*@__PURE__*/
  fileDesc("ChpzcGF3bmVyL3RleHQvdjEvdGV4dC5wcm90bxIPc3Bhd25lci50ZXh0LnYxIkoKEENvbW1hbmRUcmlnZ2VyZWQSDAoEbmFtZRgBIAEoCRIVCgljdXN0b21faWQYAiABKAlCAhgBEhEKCWNsaWVudF9pZBgDIAEoCSK/AQoJVGV4dEV2ZW50EhQKDHV0dGVyYW5jZV9pZBgBIAEoCRIMCgR0ZXh0GAIgASgJEg0KBWRlbHRhGAMgASgJEg0KBWZpbmFsGAQgASgIEjIKB2NvbW1hbmQYBSABKAsyIS5zcGF3bmVyLnRleHQudjEuQ29tbWFuZFRyaWdnZXJlZBI8Cg1maWVsZF9vZl92aWV3GAYgASgLMiUuc3Bhd25lci5maWVsZF9vZl92aWV3LnYxLkZpZWxkT2ZWaWV3Qn4KE2NvbS5zcGF3bmVyLnRleHQudjFCCVRleHRQcm90b1ABogIDU1RYqgIPU3Bhd25lci5UZXh0LlYxygIPU3Bhd25lclxUZXh0XFYx4gIbU3Bhd25lclxUZXh0XFYxXEdQQk1ldGFkYXRh6gIRU3Bhd25lcjo6VGV4dDo6VjFiBnByb3RvMw", [file_spawner_field_of_view_v1_field_of_view]);

/**
 * @generated from message spawner.text.v1.CommandTriggered
 */
export type CommandTriggered = Message<"spawner.text.v1.CommandTriggered"> & {
  /**
   * Relative resource path.
   * Format: `workspaces:{workspace_id}:commands:{command_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Custom identifier set in the workspace.
   *
   * @generated from field: string custom_id = 2 [deprecated = true];
   * @deprecated
   */
  customId: string;

  /**
   * Custom identifier used in the client. This may be set in the console. This
   * replaced `custom_id`.
   *
   * @generated from field: string client_id = 3;
   */
  clientId: string;
};

/**
 * Describes the message spawner.text.v1.CommandTriggered.
 * Use `create(CommandTriggeredSchema)` to create a new message.
 */
export const CommandTriggeredSchema: GenMessage<CommandTriggered> = /*@__PURE__*/
  messageDesc(file_spawner_text_v1_text, 0);

/**
 * TextEvent represents text input and output. Assumes output streamed per token
 * using `delta` value.
 *
 * @generated from message spawner.text.v1.TextEvent
 */
export type TextEvent = Message<"spawner.text.v1.TextEvent"> & {
  /**
   * Required. Identifies a grouping of multiple packages. For example, a text
   * event may trigger emotion events, etc. The client should be able to
   * identify related packets.
   *
   * @generated from field: string utterance_id = 1;
   */
  utteranceId: string;

  /**
   * Represents text input or output. For output text, the content of this field
   * may not be the final result; for finalized text, use `final`.
   *
   * @generated from field: string text = 2;
   */
  text: string;

  /**
   * Only output. The most recent token generated. Value is expected to be used
   * to display streamed response in runtime.
   *
   * @generated from field: string delta = 3;
   */
  delta: string;

  /**
   * Only output. Indicates that the text generation has finalized. Note that
   * the value of `text` may change as long as this is False.
   *
   * @generated from field: bool final = 4;
   */
  final: boolean;

  /**
   * Only output. Indicates the command that was triggered. This is only
   * populated when a command has been triggered.
   *
   * @generated from field: spawner.text.v1.CommandTriggered command = 5;
   */
  command?: CommandTriggered;

  /**
   * Only input. The field-of-view of the character/agent.
   *
   * @generated from field: spawner.field_of_view.v1.FieldOfView field_of_view = 6;
   */
  fieldOfView?: FieldOfView;
};

/**
 * Describes the message spawner.text.v1.TextEvent.
 * Use `create(TextEventSchema)` to create a new message.
 */
export const TextEventSchema: GenMessage<TextEvent> = /*@__PURE__*/
  messageDesc(file_spawner_text_v1_text, 1);

